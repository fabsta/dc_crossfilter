// Generated by CoffeeScript 1.8.0
(function() {
  var build_distribution_histogram, build_domain_architecture, build_hits_table, build_species_bubble_list, build_species_list, colorRenderlet, div_width, remove_da_entries;

  div_width = d3.select("#crossfilter_div").style("width").replace("px", "");

  d3.json("data/real_data.json", function(hmmer_data) {
    var data, example_data;
    console.log(hmmer_data);
    example_data = [
      {
        "evalue": 0.10,
        "x": 7,
        "y": 2,
        "sp": "Homo_sapiens",
        "da": "SH2",
        "bubble": 4
      }, {
        "evalue": 10,
        "x": 5,
        "y": 5,
        "sp": "Homo_sapiens",
        "da": "SH2",
        "bubble": 1
      }, {
        "evalue": 1,
        "x": 9,
        "y": 5,
        "sp": "Mus_musculus",
        "da": "SH2-SH3",
        "bubble": 2
      }, {
        "evalue": 0.710,
        "x": 3,
        "y": 4,
        "sp": "Homo_sapiens",
        "da": "SH2",
        "bubble": 2
      }, {
        "evalue": 2.1e-30,
        "x": 1,
        "y": 5,
        "sp": "Yeast",
        "da": "SH2-SH3",
        "bubble": 4
      }, {
        "evalue": 2.1e-70,
        "x": 2,
        "y": 5,
        "sp": "Pan_troglodytes",
        "da": "SH2",
        "bubble": 2
      }, {
        "evalue": 2.1e-80,
        "x": 2,
        "y": 5,
        "sp": "Fugu",
        "da": "SH2-BRAC2",
        "bubble": 2
      }, {
        "evalue": 0.410,
        "x": 2,
        "y": 5,
        "sp": "Sheep",
        "da": "SH2-BRAC2",
        "bubble": 2
      }, {
        "evalue": 0.410,
        "x": 2,
        "y": 5,
        "sp": "Saccharomyces",
        "da": "SH2-BRAC2",
        "bubble": 2
      }, {
        "evalue": 0.410,
        "x": 2,
        "y": 5,
        "sp": "Escherichia coli",
        "da": "SH2-BRAC2",
        "bubble": 2
      }, {
        "evalue": 0.410,
        "x": 2,
        "y": 5,
        "sp": "Nomascus_leucogenys",
        "da": "SH2-BRAC2",
        "bubble": 2
      }, {
        "evalue": 0.410,
        "x": 2,
        "y": 5,
        "sp": "Gorilla_gorilla_gorilla",
        "da": "SH2-BRAC2",
        "bubble": 2
      }
    ];
    data = crossfilter(hmmer_data.results.hits);
    jQuery(".total_hits").text(data.size);
    hmmer_data.results.hits.forEach(function(entry, i) {
      var emtpy_line;
      emtpy_line = Math.floor(Math.random() * 30) + 1;
      return entry.evalue_bin = emtpy_line;
    });
    build_distribution_histogram(data, "#distribution-chart");
    build_domain_architecture(data, "#domain_architecture-chart");
    build_species_list(data, "#modelOrganism_chart");
    build_hits_table(data, "#hits_table");
    dc.renderAll();
    jQuery("#tree_spinner").hide();
    return 0;
  });

  build_species_list = function(data, div) {
    var allowed_species, no_of_top_entries, rootChart, rootChartHight, species, speciesGroup;
    rootChart = dc.rowChart(div);
    allowed_species = {
      "Arabidopsis thaliana": 1,
      "Caenorhabditis elegans": 1,
      "Danio rerio": 1,
      "Dictyostelium discoideum": 1,
      "Drosophila melanogaster": 1,
      "Escherichia coli": 1,
      "Gallus gallus": 1,
      "Homo sapiens": 1,
      "Mus musculus": 1,
      "Rattus norvegicus": 1,
      "Saccharomyces cerevisiae": 1,
      "Schizosaccharomyces pombe": 1
    };
    species = data.dimension(function(d) {
      if (d.species === "Homo sapiens" || d.species === "Arabidopsis thaliana" || d.species === "Caenorhabditis elegans" || d.species === "Danio rerio" || d.species === "Dictyostelium discoideum" || d.species === "Drosophila melanogaster" || d.species === "Escherichia coli" || d.species === "Gallus gallus" || d.species === "Homo sapiens" || d.species === "Mus musculus" || d.species === "Rattus norvegicus" || d.species === "Saccharomyces cerevisiae" || d.species === "Schizosaccharomyces pombe") {
        return d.species;
      } else {
        return "other";
      }
    });
    no_of_top_entries = 10;
    rootChartHight = no_of_top_entries * 20;
    speciesGroup = species.group();
    return rootChart.width(Math.floor(div_width / 4)).height(rootChartHight).transitionDuration(750).dimension(species).group(speciesGroup).title(function(d) {
      return d.value;
    }).elasticX(true).margins({
      top: 20,
      left: 10,
      right: 10,
      bottom: 20
    });
  };

  build_domain_architecture = function(data, div) {
    var DaChart, da, da1, daChartHight, daGroup, daGroup1, k, no_of_top_entries, v, valid_da, _ref;
    DaChart = dc.rowChart(div);
    da1 = data.dimension(function(d) {
      return d.arch;
    });
    daGroup1 = da1.group();
    valid_da = {};
    no_of_top_entries = 3;
    _ref = daGroup1.top(no_of_top_entries);
    for (k in _ref) {
      v = _ref[k];
      valid_da[v.value] = 1;
    }
    da = da1.filter(function(d) {
      if (d.value in valid_da) {
        return d.arch;
      }
    });
    daGroup = da.group();
    daChartHight = no_of_top_entries * 20;
    DaChart.width(Math.floor(div_width / 4)).height(daChartHight).transitionDuration(750).dimension(da1).group(daGroup1).elasticX(true);
    return DaChart.xAxis().ticks(4);
  };

  build_species_bubble_list = function(data, div) {
    var allowed_species, dateGroup, modelOrgaChart, species, speciesGroup;
    modelOrgaChart = dc.bubbleChart(div);
    allowed_species = {
      "Homo_sapiens": 1,
      "Yeast": 1
    };
    species = data.dimension(function(d) {
      if (allowed_species.hasOwnProperty(d.sp)) {
        return d.sp;
      }
    });
    speciesGroup = species.group();
    console.log("there are " + (speciesGroup.size()) + " ref species");
    dateGroup = species.group().reduce(function(p, v) {
      ++p.count;
      p.label = v.sp;
      p.bubble = v.bubble;
      p.x = v.x;
      p.y = v.y;
      return p;
    }, function(p, v) {
      --p.count;
      p.bubble = 0;
      p.label = "";
      p.x = 0;
      p.y = 0;
      return p;
    }, function() {
      return {
        count: 0,
        x: 0,
        y: 0,
        label: ""
      };
    });
    return modelOrgaChart.width(Math.floor(div_width / 4)).height(100).dimension(species).group(dateGroup).transitionDuration(1500).colors(["#a60000", "#ff0000", "#ff4040", "#ff7373", "#67e667", "#39e639", "#00cc00"]).colorDomain([-12000, 12000]).x(d3.scale.linear().domain([0, 5.5])).y(d3.scale.linear().domain([0, 5.5])).r(d3.scale.linear().domain([0, 2500])).keyAccessor(function(p) {
      console.log("using " + p.value.label);
      return p.value.label;
    }).valueAccessor(function(p) {
      console.log("using " + p.value.count);
      return p.value.count;
    }).radiusValueAccessor(function(p) {
      return p.value.count;
    }).transitionDuration(1500).renderLabel(true);
  };

  build_distribution_histogram = function(data, div) {
    var evalues, evaluesArc, evaluesArcGroup, evaluesBac, evaluesBacGroup, evaluesChart, evaluesEuk, evaluesEukGroup, evaluesGroup, evaluesOth, evaluesOthGroup, k, max_evalue_bin, max_y_value, v, values_array, _ref;
    evaluesChart = dc.barChart(div);
    evalues = data.dimension(function(d) {
      return d.evalue_bin;
    });
    max_evalue_bin = 30;
    evaluesGroup = evalues.group().reduceCount(function(d) {
      return d.evalue_bin;
    });
    evaluesEuk = data.dimension(function(d) {
      return d.kingdom === 'Eukaryota';
    });
    evaluesArc = data.dimension(function(d) {
      return d.kingdom === 'Archaea';
    });
    evaluesBac = data.dimension(function(d) {
      return d.kingdom === 'Bacteria';
    });
    evaluesOth = data.dimension(function(d) {
      return d.kingdom === 'Other';
    });
    evaluesEukGroup = evaluesEuk.group().reduceCount(function(d) {
      return d.evalue_bin;
    });
    evaluesArcGroup = evaluesArc.group().reduceCount(function(d) {
      return d.evalue_bin;
    });
    evaluesBacGroup = evaluesBac.group().reduceCount(function(d) {
      return d.evalue_bin;
    });
    evaluesOthGroup = evaluesOth.group().reduceCount(function(d) {
      return d.evalue_bin;
    });
    values_array = [];
    _ref = evaluesGroup.top(30);
    for (k in _ref) {
      v = _ref[k];
      values_array.push(v.value);
    }
    max_y_value = d3.max(values_array);
    console.log("max y value is ".max_y_value);
    return evaluesChart.width(div_width).height(200).margins({
      top: 10,
      right: 50,
      bottom: 30,
      left: 40
    }).dimension(evalues).group(evaluesGroup).y(d3.scale.linear().domain([0, max_y_value])).x(d3.scale.pow().exponent(-.5).domain([0, 10])).x(d3.scale.linear().domain([0, max_evalue_bin])).yAxisLabel('Number of hits').renderlet(colorRenderlet).renderlet(function(chart) {
      return chart.selectAll("g.x text").attr('transform', "rotate(-45)");
    });
  };

  remove_da_entries = function(source_group, top_hash) {
    return {
      all: function() {
        return source_group.all().filter(function(d) {
          return d.value in top_hash;
        });
      }
    };
  };

  build_hits_table = function(data, div) {
    var datatable, sizeDim;
    datatable = dc.dataTable(div);
    sizeDim = data.dimension(function(d) {
      return d.evalue;
    });
    return datatable.dimension(sizeDim).group(function(d) {
      return "";
    }).columns([
      function(d) {
        return d.species;
      }, function(d) {
        return d.evalue;
      }, function(d) {
        return d.arch;
      }
    ]).size(10).order(d3.ascending);
  };

  colorRenderlet = function(_chart) {
    var setStyle;
    setStyle = function(selection, keyName) {
      selection.style("fill", function(d) {
        if (d[keyName] === "eukaryota") {
          return "red";
        } else if (d[keyName] === "archaea") {
          return "green";
        } else {
          if (d[keyName] === "bacteria") {
            return "yellow";
          }
        }
      });
    };
    setStyle(_chart.selectAll("g.stack").selectAll("rect.bar"), "layer");
    setStyle(_chart.selectAll("g.dc-legend-item").selectAll("rect"), "name");
  };

}).call(this);
